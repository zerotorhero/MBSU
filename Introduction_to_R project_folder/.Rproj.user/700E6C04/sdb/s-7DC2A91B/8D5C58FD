{
    "contents" : "\n# You can use the \"#\" symbol to tell R to ingnore the text that follows\n#### you can use as many \"#\" as you wish \n# you can also place \"#\" comments after R inputs, for example:\nx<-0 # blablabla... my R interesting R input\n\n\n##############################################################################\n# Date: Tuesday, Oct. 11, 2011\n# By: Insert your name (e.g. Zofia E. Taranu)\n# Description: BGSA Introductory Worshop - Day 2\n# Version of R used: RStudio 0.94.92\n# ...\n\n# 1.HOUSEKEEPING\n# Housekeeping are functions that will ensure that your script runs smoothly.\n  \n# Clear R memory\nrm(list=ls())   \n\n# Removes all variables from memory \n# Prevents errors such as use of older data\n  \n# 2. SET WORKING DIRECTORY\n# A directory is a folder and the instructions (path) to get to that folder\n# The working directory is the folder from which R will read files\n# and to which R will save files\n#setwd(\"~/Desktop/PhD/FALL 2011/Stats workshop - Day 2/Data_Intro Day 2\")\n#This is not necessary when using RStudio projects\n  \n\n# 3. DATA IMPORT\n# First we will import \"clean\" data in a csv file\n\niris_data<-read.csv(\"./Data/iris_good.csv\") \n# \"iris_good.csv\" is the complete file name, where \".csv\" is the file's extension\n\n# Look at...\n# a. the entire data matrix (think of this as your excel spreadsheet in a way)\niris_data\niris_data$Sepal.Length\n  \n# b. the variables included in this dataset (column names)\nnames(iris_data)\n  \n# c. the first few lines (default is 6 lines)\nhead(iris_data, n = 5)     # 5 is the number of lines\n\n# d. the structure of your data (variables, types, values)\nstr(iris_data)\n  \n# e. a summary of the data\nsummary(iris_data)\n# note that summary has useful outputs for many generic R object types \n# (eg. anova objects)\n  \n# f. a default plot\nplot(iris_data)\n# as with \"summary\", plot has default outputs for many generic R object types \n  \n# 4. BROKEN DATA\n# Attempt to import and visualization the BROKEN data (\"iris_broken\")\n\niris_data<-read.csv(\"iris_broken.csv\")\n# Error 1: wrong extension (.txt not .csv)\n\niris_data<-read.csv(\"iris_broken.txt\")\n  \n# Look at the data, head() and str() are\n# these are most useful at the importing stage\nhead(iris_data)\nstr(iris_data)\n\n# Error 2: rammed all the columns into one\n# ie. did not recognize the seperation character\n  \n# Try the import again with a different separator\niris_data<-read.csv(\"iris_broken.txt\", sep = \"\")\n\n# use the \"sep\" argument to tell R what you have been using to separate \n# your columns (here; a TAB)\nhead(iris_data)\nstr(iris_data)\n  \n# Error 3: The first few lines are useless \niris_data<-read.csv(\"iris_broken.txt\", sep = \"\", skip = 4)\n\n# Add the \"skip\" argument to skip a few lines\nhead(iris_data)\nstr(iris_data)\n  \n# Error 4: Looking at the file, we notice that our data contains uncapitalized \"na\" and \"Forgot_this_value\"\n# Recall that R only recognizes \"NA\"\niris_data$Petal.Length\niris_data<-read.csv(\"iris_broken.txt\", sep = \"\", skip = 4, na.strings = c(\"NA\",\"na\",\"Forgot_this_value\"))\n                      \nhead(iris_data)\nstr(iris_data)\n\n# Error 5: Numerous variables are not numerical\nclass(iris_data$Sepal.Length)  # numberic   YAY!\nclass(iris_data$Sepal.Width)   # factor  ;(\nclass(iris_data$Petal.Length)  # factor  ;(\nclass(iris_data$Petal.Width)   # numberic   YAY!\n\n# notice for example:\niris_data$Sepal.Width[23]  # the row 23 value was not properly entered\n\niris_data<-read.csv(\"iris_broken.txt\",\n                      sep=\"\",\n                      skip=4,\n                      na.strings=c(\"NA\", \"na\",\"forgot_this_value\"),\n                      as.is=c(\"Sepal.Width\", \"Petal.Length\"))\n  \n# tell R to leave the two columns alone\nhead(iris_data)\nstr(iris_data)\n\n# that was not perfect, now R thinks these should only be characters, not numeric values\n# use \"as.class wanted(argument)\" where you can replace \"class wanted\"\" with \"numeric\", \"ordered\" or \"factor\"              \niris_data$Sepal.Width <- as.numeric(iris_data$Sepal.Width)\niris_data$Petal.Length <- as.numeric(iris_data$Petal.Length)\n# Notice the WARNING because NAs were introduced where non-numeric values were found   \n# e.g., the 23rd Sepal Width entry has now been changed to <NA>     \niris_data$Sepal.Width[23]                    \n  \n# Broken data has now been fixed and loaded into R!! Big time YAY!\nhead(iris_data)\nstr(iris_data)\n\n# 5. SAVING DATA  \n\n# a. Saving an R file \nsave(iris_data, file = \"iris_cleaned.R\")               \n\n# Clear your memory\nrm(list = ls())\n  \n# b. reload iris_data\nload(\"iris_cleaned.R\")\nhead(iris_data)   # looking good!\n                    \n# 6. EDITING DATA\n\n# Let's work with the original dataset\nrm(list=ls())\niris_data<-read.csv(\"iris_good.csv\")\n\n# a. apply functions (FUN) to your data using \"lapply\"\n?apply\n# 'lapply' returns a list of the same length as X, each element of which is \n# the result of applying FUN (any given function) to the corresponding element \n# of X.\n\n# apply the \"mean\" function \niris_means<-sapply(iris_data[,2:5],mean) # calling up the columns by indices\n# or alternatively, you can call up the columns by name:\niris_means<-sapply(iris_data[,c(\"Sepal.Length\",\n                                \"Sepal.Width\",\n                                \"Petal.Length\",\n                                \"Petal.Width\")],mean)\n\n# you may replace the values with normalized data by using the \"scale\" function\niris_data[,2:5]<-sapply(iris_data[,2:5],scale)\n# or, equivalently:\niris_data[,c(\"Sepal.Length\", \"Sepal.Width\",\"Petal.Length\",\"Petal.Width\")]<-sapply(iris_data\n                                    [,c(\"Sepal.Length\",\n                                      \"Sepal.Width\",\n                                      \"Petal.Length\",\n                                      \"Petal.Width\")],scale)\n\n# b. creating a dataframe with a new object name\n# The \"data.frame\" command creates data frames which share many of the properties \n# of matrices.\n\nrm(list=ls())   # to remove all the work we just did\niris_data<-read.csv(\"iris_good.csv\")  # reload the data iris \n\nnormalized_iris<-data.frame(iris_data[\"Species\"],sapply(iris_data[,c(\"Sepal.Length\",\n                                               \"Sepal.Width\",\n                                               \"Petal.Length\",\n                                               \"Petal.Width\")],scale))\n\n# where the first column of this dataframe is \"Species\" and the last four are the \n# normalized Sepal and Petal variables!                     \n\nnames(normalized_iris)\nhead(normalized_iris)\nstr(normalized_iris)\n# c. replacing values or names in data file\n\n# if you noticed a typo or if, for example, the taxonomy has changed and you need \n# to update some of your species names, you can use the \"gsub\" command\n# We will substitute the name \"versicolor\" with \"furfuracea\"\n\n?gsub\n# searches for matches to the argument \"pattern\"\" within each element of a character \n# vector and replaces this with the argument \"replacement\".\ngsub(pattern = \"versicolor\",replacement = \"furfuracea\",x = iris_data$Species)\n\n# Let's combine \"lappy\" and \"gsub\" to implement this change into the dataframe\niris_data<-as.data.frame(sapply(iris_data,gsub,pattern=\"versicolor\",replacement=\"furfuracea\"))\nlevels(iris_data$Species)   # seems to have worked!\nhead(iris_data)\nstr(iris_data)      # but the variables appear as factors again ;(\n\niris_data$Sepal.Length <- as.numeric(iris_data$Sepal.Length)\niris_data$Sepal.Width <- as.numeric(iris_data$Sepal.Width)\niris_data$Petal.Length <- as.numeric(iris_data$Petal.Length)\niris_data$Petal.Width <- as.numeric(iris_data$Petal.Width)\nstr(iris_data)    # ok now we're good!\n\n# d. subsetting and sorting dataframes\niris_sub<-subset(iris_data,Sepal.Length>4.4,select=c(Sepal.Length,Species))     \nhead(iris_sub)      \n# where we've only kept rows with Sepal.Length greater than 4.4 and \"select\" \n# alowed us to choose columns of intereste (i.e., \"Sepal Length\" and \"Species\")  \n\n#                                    \niris_sub<-subset(iris_data,Sepal.Length > median(Sepal.Length) & Species == \"virginica\")\n# OR\niris_sub<-iris_data[iris_data$Sepal.Length > median(iris_data$Sepal.Length) & iris_data$Species == \"virginica\",]                                     \n\n# e. ordering the data                                \niris_ord<-iris_data[order(iris_data$Species,iris_data$Sepal.Width),]\n# Where we've first ordered by \"Species\" and then by \"Sepal Width\"    \n \n# 7. EXPORTING DATA\n\n# a. recall our normalized iris data, now save it to a .csv file:\nwrite.table(normalized_iris, file=\"normalized_iris.csv\", sep = \",\")\n              \nplot(iris_data$Sepal.Length, normalized_iris$Sepal.Length, xlab = \"Sepal Length\", \n     ylab = \"Normal. Sepal Length\", pch = 19, col = \"cadetblue\")                                     \n                                                             \n# b. saving PDF figures\n  \nrm(list=ls())                # clear history\ninstall.packages(\"foreign\")  # installing a package                                     \nlibrary(foreign)             # load libraries\n\n# Note, you can create a new folder called \"Figures\", then reset your working directory \n# so that your figures are saved there!\n\niris_data<-read.csv(\"iris_good.csv\")                                     \nsetwd(\"~/Desktop/PhD/FALL 2011/Stats workshop - Day 2/Figures_Intro Day 2\")\n                                     \n# c. saving a PDF of the plot\npdf(\"iris_plot.pdf\")   # Opens a PDF in your Figures folder\nplot(iris_data)        # Creates the figure\ndev.off()              # Closes the PDF file\n\n\n# 7. DEALING WITH THE BROKEN WITH THE BROKEN CO2 DATA!\nrm(list=ls())\nsetwd(\"~/Desktop/PhD/FALL 2011/Stats workshop - Day 2/Data_Intro Day 2\")  \nCO2_data<-read.csv(\"CO2_broken.csv\") \n\n# look at the data\nhead(CO2_data)\nstr(CO2_data)\n\n# Error 1: the two first lines are just random notes about some missing values\n# in the Quebec subset \nCO2_data<-read.csv(\"CO2_broken.csv\", skip = 2)\nhead(CO2_data)\nstr(CO2_data)\n\n# Error 2: take care of NAs; Let's look at the Quebec data                                                             \nCO2_sub_QC<-subset(CO2_data, CO2_data$Type == \"Quebec\", select=c(conc, uptake))\n\n# replace the \"cannot_read_notes\" to proper NAs\nCO2_data<-read.csv(\"CO2_broken.csv\", skip = 2, na.string = c(\"cannot_read_notes\"))\nhead(CO2_data)\nstr(CO2_data)\n                                                            \n# Looks like we have levels called \"chiled\" instead of \"chilled\" and \"nnchilled\"\n# instead of \"nonchilled\": typos!\nlevels(CO2_data$Treatment)\n\n# Error 3: take care of typos in the Treatment variable                                                             \nCO2_data<-as.data.frame(sapply(CO2_data,gsub,pattern=\"chiled\",replacement=\"chilled\"))\nCO2_data<-as.data.frame(sapply(CO2_data,gsub,pattern=\"nnchilled\",replacement=\"nonchilled\"))\nlevels(CO2_data$Treatment)\n\nstr(CO2_data)\n\n# One more problem, the \"conc\" and \"uptake\" variables appear as factors\n\n# Error 4: change thes variables from factor to numeric \nCO2_data$conc<-as.numeric(CO2_data$conc)\nCO2_data$uptake<-as.numeric(CO2_data$uptake)\n\nstr(CO2_data)\n\n# All done!!",
    "created" : 1358978282042.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3899761778",
    "id" : "8D5C58FD",
    "lastKnownWriteTime" : 1358978677,
    "path" : "~/Documents/R and Stats for courses/Intro to R MBSU/MBSU/Introduction_to_R project_folder/R/02_Basics and importing data.R",
    "properties" : {
        "notebook_author" : "Etienne Low-Decarie",
        "notebook_title" : "02_Basics and importing data.R",
        "notebook_type" : "default"
    },
    "source_on_save" : false,
    "type" : "r_source"
}